name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish_to_test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python test_generator.py
          pytest --cov=sqlfluff_templater_schemachange

      - name: Test package functionality
        run: |
          # Test basic integration
          cd temp/basic
          sqlfluff lint test.sql --dialect snowflake
          sqlfluff render test.sql --dialect snowflake

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          # Clean any previous builds
          rm -rf dist/ build/ *.egg-info/

          # Build source distribution and wheel
          python -m build

      - name: Check distribution
        run: |
          twine check dist/*

          # Display what was built
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 5

  test-install:
    name: Test Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install from wheel
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl

      - name: Test basic functionality
        run: |
          python -c "
          import sqlfluff_templater_schemachange
          from sqlfluff_templater_schemachange.templater import SchemachangeTemplater
          print('‚úì Package imported successfully')
          print(f'‚úì Templater name: {SchemachangeTemplater.name}')
          "

      - name: Test SQLFluff integration
        run: |
          pip install sqlfluff>=2.0.0 PyYAML>=5.1

          # Create minimal test
          mkdir test_install
          cd test_install

          echo '[sqlfluff]' > .sqlfluff
          echo 'templater = schemachange' >> .sqlfluff
          echo 'dialect = snowflake' >> .sqlfluff

          echo 'config-version: 1' > schemachange-config.yml
          echo 'vars:' >> schemachange-config.yml
          echo '  db: "TEST_DB"' >> schemachange-config.yml

          echo 'USE DATABASE {{ db }};' > test.sql

          sqlfluff lint test.sql
          sqlfluff render test.sql

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build, test-install]
    if: github.event.inputs.publish_to_test_pypi == 'true' || (github.event_name == 'release' && github.event.action == 'published' && contains(github.event.release.tag_name, 'rc'))
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/sqlfluff-templater-schemachange

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Test installation from Test PyPI
        run: |
          # Wait a bit for the package to be available
          sleep 60

          python -m pip install --upgrade pip
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ sqlfluff-templater-schemachange

          python -c "import sqlfluff_templater_schemachange; print('‚úì Test PyPI installation successful')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test-install]
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.event.release.tag_name, 'rc')
    environment:
      name: pypi
      url: https://pypi.org/p/sqlfluff-templater-schemachange

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Test installation from PyPI
        run: |
          # Wait a bit for the package to be available
          sleep 120

          python -m pip install --upgrade pip
          pip install sqlfluff-templater-schemachange

          python -c "import sqlfluff_templater_schemachange; print('‚úì PyPI installation successful')"

  create-github-release-assets:
    name: Add Assets to GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.event.release.tag_name, 'rc')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Bump version for development
        run: |
          # This would typically bump to the next development version
          # For now, we'll just create an issue to remind us
          echo "Consider bumping version for next development cycle" > post_release_notes.md

      - name: Create post-release issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Post-release tasks for ' + context.payload.release.tag_name,
              body: `
              Release ${context.payload.release.tag_name} has been published successfully!

              **Post-release checklist:**
              - [ ] Verify package is available on PyPI
              - [ ] Update documentation if needed
              - [ ] Consider bumping version for next development cycle
              - [ ] Update any dependent projects
              - [ ] Announce release in relevant channels

              **Release info:**
              - Tag: ${context.payload.release.tag_name}
              - Published at: ${context.payload.release.published_at}
              - Release URL: ${context.payload.release.html_url}
              `,
              labels: ['release', 'maintenance']
            })

  notify:
    name: Notify on Success/Failure
    runs-on: ubuntu-latest
    needs: [publish-pypi, publish-test-pypi]
    if: always()

    steps:
      - name: Notify on success
        if: needs.publish-pypi.result == 'success' || needs.publish-test-pypi.result == 'success'
        run: |
          echo "üéâ Package published successfully!"
          if [[ "${{ needs.publish-pypi.result }}" == "success" ]]; then
            echo "‚úì Published to PyPI"
          fi
          if [[ "${{ needs.publish-test-pypi.result }}" == "success" ]]; then
            echo "‚úì Published to Test PyPI"
          fi

      - name: Notify on failure
        if: needs.publish-pypi.result == 'failure' || needs.publish-test-pypi.result == 'failure'
        run: |
          echo "‚ùå Package publishing failed!"
          if [[ "${{ needs.publish-pypi.result }}" == "failure" ]]; then
            echo "‚úó PyPI publishing failed"
          fi
          if [[ "${{ needs.publish-test-pypi.result }}" == "failure" ]]; then
            echo "‚úó Test PyPI publishing failed"
          fi
          exit 1
